-----------------------------------------------
1. Set-Up Virtual Environment 

1. Open your terminal or command prompt.
2. Navigate to the folder where you want to create your project.
3. Run this command to create a virtual environment:

• python -m venv env
• .\env\Scripts\activate

• To Close a Server
	Ctrl + C
• Go Back One Folder:
	cd ..

-----------------------------------------------
2. Install Django

install Django using pip, Python’s package manager

• pip install django
• python -m django --version

-----------------------------------------------
3. Create Django project 

To start a new project, run these commands:

• django-admin startproject project_name
• cd project_name (navigate into this folder)
• python manage.py runserver

If Django Welcome Page is there 
 = Environment is Ready !

-----------------------------------------------
Understanding Django’s Project Structure

1. manage.py
This is Django’s command-line utility. You’ll use it to run the server, create apps, and apply database migrations.

2. settings.py
This file contains your project’s configurations, such as database settings, installed apps, and middleware.

3. urls.py
This file defines the routes for your application, mapping URLs to views.

4. wsgi.py/asgi.py
These files handle server deployment and communication between your app and the web server.

============================================================================================
4. Creating My First Django App 

• Apps are modular components of your project

• Generate an app
	-> python manage.py startapp app_name

• Add app_name  to your project’s settings 
	-> open settings.py and add 'app_name', 
to the INSTALLED_APPS list.


• Add - Include App Url in main Project Url
	- path('demoapp2/', include('demoapp2.urls')),                                                                           

----------------------------------------------------------------------------------------------
Understanding App Structure

1. models.py: 
Define your database structure here.

2. views.py: 
Write the logic for handling user requests and returning responses.
Handles user requests and responses.

3. urls.py: 
Create routes for this app ( create this file manually).
Link views to URLS in urls.py


-----------------------------------------------
1.1. What is a Model?
Django uses models to define the structure of your database

-----------------------------------------------
2.1. What is a View?
A view is a Python function that takes a web request and returns a web response.

• Open myapp/views.py

from django.http import HttpResponse              
                                                                                           
def home(request):                                                     
    return HttpResponse("Hello, World!")             

-----------------------------------------------
3.1. What are Urls?
• Now, connect this view to a URL. 
• Open myproject/urls.py 

from django.urls import path                                
from myapp import views                                      
                                                                                         
urlpatterns = [                                                            
    path('home/', views.home, name='home'),	             
]            

-----------------------------------------------
4. What is a Template?
A template is an HTML file that lets you create dynamic web pages. 

• Create a folder named templates inside your app_name directory.
• Add a file called home.html with this content:

<!DOCTYPE html>  
<html>     
<head>    
    <title>Welcome</title>  
</head>  
<body>    
    <h1>Hello, Django Templates!</h1>  
</body>   
</html>   


• Update your view to render this template:

    ->  open myapp/views.py                                        
                                                                                         
from django.shortcuts import render                
                                                                                         
def home(request):                                                   
    return render(request, 'home.html')              
                                                                                         

============================================================================================
5. Models and Databases

Django uses models to define the structure of your database. 

• Open myapp/models.py 
• Define a model:

from django.db import models                                     
                                                                                                  
class Item(models.Model):                                              
    name = models.CharField(max_length=50)       
    price = models.IntegerField()     
    desc = models.TextField(blank=True, null=True) 
    created_at = models.DateTimeField(auto_now_add =True)                                                                                     

    def __str__ (self):
        return self.name



      def _str_ (self):                                                           
           Return self.name                                                                                                                                                       

- Apply migrations to create the database table:
• python manage.py makemigrations
• python manage.py migrate


============================================================================================
6. Django Admin Panel

 - Create a superuser and access the admin panel at /admin.
• python manage.py createsuperuser

- Use Django’s admin interface to add and manage items. 
- Register the model in admin.py :

from django.contrib import admin                       
from .models import Item                                        
                                                                                           
admin.site.register(Item)                                          


============================================================================================
7. User authentication 

8. Forms and Validations

9. Static and Media Files
-----------------------------------------------

============================================================================================
C.R.U.D Functionality

• C -     POST   Request
• R -        GET   Request
• U -        PUT   Request
• D - DELETE   Request

-----------------------------------------------

-----------------------------------------------

-----------------------------------------------

I will provide you with the material from a chat about learning django as a beginner 

Based on this material and your own knowledge 

Please expand further on the transcript and provide more details and a bit more advanced topics







                                       

-----------------------------------------------

Different Versions of Views in DRF

In DRF, there are 3 types of views for handling requests and returning responses:
	1. API Views
	2. Generic Views
	3. Viewsets

----------------------------------------------------------------------------------------------
1. API Views

Function-Based Views (FBVs):
  - FBVs in DRF are similar to regular Django views but are tailored to handle API requests. They use DRF's decorators to parse request data and return appropriate responses.

Class-Based Views (CBVs):
  - CBVs in DRF are classes that handle HTTP methods through methods like get, post, put, etc. They provide better structure and scalability.

----------------------------------------------------------------------------------------------

2. Generic Views

Generic views are higher-level abstractions over CBVs. They handle common patterns, such as fetching objects or creating resources, with minimal code.


----------------------------------------------------------------------------------------------

3. Viewsets

Viewsets combine the logic for handling multiple HTTP methods (GET, POST, PUT, DELETE, etc.) into a single class. They are used with Routers, which automatically generate URL patterns for the viewset.


----------------------------------------------------------------------------------------------

When to Use Which?
  - FBVs: Simple and quick APIs.
  - CBVs: When you need more structured and reusable code.
  - Generic Views: CRUD operations with minimal boilerplate.
  - Viewsets: Fully RESTful APIs with automatic URL routing


















