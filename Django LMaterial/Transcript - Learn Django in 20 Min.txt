Transcript - Learn Django in 20 Minutes!!
	Tech With Tim


Overview
0:00
In this video, I'll show you
0:01
how to build
0:01
a simple Django application
0:03
as fast as possible.
0:05
Afterwards,
0:06
you'll know how to set up
0:06
a Django project,
0:07
how to configure your URLs, how
0:09
to create a simple database model,
0:11
and how display dynamic data
0:12
using templates.
0:14
In case you aren't aware,
0:15
Django is a powerful web
0:16
framework for Python.
0:17
There's been use to build websites
0:19
like Instagram, Spotify and Dropbox.
0:22
With that said, let's get started.
0:23
After a quick word
0:24
from the sponsor of this video,
0:27
I've got some great news
0:27
for you guys recently.
0:29
I've got to know a fantastic team
0:30
who created a free tool
0:32
that can supercharge
0:33
or development journey,
0:34
especially if you work with Django.
0:36
Now, this company is called App Tension,
0:38
and they've sponsored this video
0:39
so that I can tell you
0:40
about their SAS boilerplate.
0:42
Picture this.
0:43
You've got a brilliant idea,
0:44
but you're dreading the hours
0:45
or weeks of coding that lies ahead
0:47
just to get the project setup.
0:49
Now, that's
0:49
where SAS boilerplate comes in.
0:51
This is not just a fancy name.
0:53
This is a tool that literally removes
0:54
all of that tedious work
0:56
and lets you dive in right
0:57
to the heart of your project.
0:58
Now this comprehensive
1:00
kit covers everything
1:01
your SAS application needs front
1:03
end, back end API, scalable IWC
1:06
based architecture
1:07
and intuitive admin panel workers.
1:09
It's all there.
1:10
It even includes
1:11
essential ready to use features
1:12
like authentication
1:13
notifications and yes,
1:15
even payment and subscription systems
1:17
with a stripe integration.
1:18
And for you content wizards out there,
1:20
there's a CMS integration
1:21
with Contentful.
1:22
What's more,
1:23
the team behind
1:24
this actually has a dedicated
1:25
discord community
1:26
that you can join
1:27
to get any assistance that you need.
1:29
So why spend the weeks
1:30
setting up your code base
1:31
when you could be working
1:32
on the core products
1:33
and building features
1:34
that provide users real value?
1:36
Check out SAS boilerplate
1:37
from the link in the description
1:39
and get started today
1:40
skipping through all of those
1:41
tedious setup steps.
Django Project Setup
1:43
All right,
1:43
so let's begin here by setting up Django.
1:45
To do that,
1:46
we're going to open
1:46
some kind of directory.
1:47
You can see
1:48
I have this demo directory
1:49
opened in Visual Studio Code
1:51
and we're going to get into
1:52
a terminal environment.
1:53
I just open the terminal in vs code.
1:55
Obviously you need Python installed
1:57
and once you've installed python,
1:59
we're going to say pip install
2:00
and then Django in our terminal
2:02
to install the Django package.
2:04
Now if you're on Mac or Linux,
2:05
you can type PIP three install Django
2:07
and once Django is installed,
2:08
we can create a Django project.
2:10
Now restart your terminal
2:11
if you're working in the same one
2:13
and then type the command.
2:15
Django Admin.
2:16
Start project eight.
2:18
The name of the project
2:19
which in this case can be
2:20
something like demo.
2:22
When you do that
2:22
you'll see that
2:23
it will generate a new directory for you
2:25
that contains a bunch of files
2:26
that are pre generated by Django.
2:28
Let me walk through what these files do
2:30
and then we can create
2:30
a Django application.
Pregenerated File Explanation
2:32
So the first file we have
2:33
here is a knit pie.
2:34
Now, an entire pie is a special file
2:36
that tells Python to treat this directory
2:38
like a Python package.
2:40
Next, we have SGI and SGI.
2:42
These are special configuration
2:43
files that we don't need to deal with.
2:45
These are going to allow Django
2:47
to actually communicate
2:48
with the web server.
2:49
We then have a setting start
2:50
py file straightforward.
2:51
This contains
2:52
a bunch of different settings.
2:53
We'll go in here
2:54
quite often
2:55
when we need to install different
2:56
Django applications,
2:57
install plug ins, change
2:58
some of our middleware
2:59
and do things like modify
3:01
our database engines.
3:02
If you're not aware,
3:03
Django is compatible
3:04
with many different databases
3:05
and you can configure
3:06
all of that type of stuff
3:07
inside of this settings file.
3:09
We then have a URL stopping file.
3:11
This file will allow us to configure
3:13
different URL routes that we can
3:14
then kind of route or direct
3:16
to different Django applications,
3:18
which I'll get into in one second.
3:20
Next, we have a managed API file.
3:22
This is a special file again
3:23
that actually acts as a command line tool
3:25
that allows us to run
3:26
the special commands,
3:27
do things like make database migrations,
3:30
run our Python server
3:31
and all kinds of other things
3:32
like creating users
3:33
for our Django admin panel,
3:35
which we'll get into in one minute.
3:37
All right.
3:37
So now let's quickly
3:38
talk about Django applications.
Django Applications
3:39
So right now we have something
3:40
known as a Django project.
3:42
The Django Project has these main files
3:44
that I just discussed.
3:45
But if we actually want
3:46
to have any executable code
3:48
or be able to see
3:49
a kind of website appearing,
3:50
we need to create something
3:51
known as a Django app.
3:52
Now, a Django
3:53
app is meant to be
3:54
a standalone application
3:55
that you can plug and play,
3:57
meaning
3:57
I can take it out of this Django project
3:59
and put it into another Django project.
4:01
These apps contains things
4:03
like database models,
4:04
different views or routes,
4:06
templates, all kinds of other stuff
4:07
we can have inside of our applications.
4:09
So what we need to do
4:10
whenever we're working with
4:11
Django is create an app.
4:13
So to make an app, what we're going to do
4:14
is go to our terminal.
4:15
We're going to see into the directory
4:17
where we have our now
4:19
Django project, which is called Demo,
4:21
and we're going to run the Command
4:23
Python managed API.
4:25
And then create app
4:27
and actually that's going to be
4:28
Start app.
4:30
Then we're going to put
4:30
the name of the app.
4:31
In this case,
4:32
I can just do something like my app
4:34
when I do
4:35
this is going to create an application
4:36
inside of here called my app,
4:38
which contains a bunch of different files
4:39
which we're going to work in in
4:40
just one second.
4:42
Now, once
4:42
we've created this application,
4:43
we actually need to link this
4:45
to our Django project.
4:46
To do that,
4:47
we need to go into this main folder,
4:48
which is the same name of our project.
4:50
Go to settings dot py.
4:52
Scroll down to where we see
4:54
installed applications
4:55
and then place a string
4:56
containing the name of our new app.
4:59
In this case, it's going to be my app.
5:01
This will essentially
5:01
install the application
5:03
and allow our Django projects.
5:04
Now view any of the code
5:05
we put in this app.
5:07
Now just to clarify
5:08
apps a little bit more,
5:09
we can have different apps
5:10
for different purposes.
5:11
So we may have an app for authentication,
5:13
we may have an app for specific
5:15
user types.
5:15
So maybe admins or moderators,
5:17
we may have an app that allows us to view
5:19
the main content of our website.
5:21
There's all kinds
5:21
of different applications
5:22
we can create
5:23
and we can separate different logic
5:24
into different applications
5:26
where it makes sense to do so
5:28
now that we've created this app.
5:29
What we want to do is go into the app
5:31
and start creating some simple URLs
5:33
and some routes.
5:34
So first of all, let's just have a look
5:35
at some of the files
5:36
we have inside of here.
5:37
So again, a net API,
5:38
we've talked about that admin pie.
5:40
This allows us to register
5:41
database models
5:42
so we can view them on our admin panel.
5:44
We have app store
5:45
PY which we don't need to worry about
5:47
models dot
5:47
py we will place our database
5:49
models tests where we can write
5:51
some automated test cases
5:52
and then views,
5:53
which is mainly where we'll work, where
5:54
we'll create
5:55
different views or routes
5:56
that we can access on our website.
5:58
For now though,
5:59
I actually want to create a new file
6:00
here called URLs Dot Pie.
URL Configuration
6:02
This is where
6:03
we'll place
6:03
different URL routes
6:05
and then connect them to our views.
6:07
So let's go into views here
6:08
and create a simple view
6:09
just so we can test how things work.
6:11
So to create a view or a roots,
6:12
what we're going to do is type defined.
6:14
So we're going to create a function.
6:15
We'll give this a name,
6:16
something like home.
6:18
We're going to take in the request object
6:19
as a parameter
6:20
which will allow us to access things
6:22
like query parameters
6:23
and the body of different requests
6:25
that are being sent to this function.
6:27
And then from here,
6:27
we're going to return
6:28
some type of response.
6:30
Now we can render some HTML templates,
6:32
which I'm going
6:32
to show you in one second,
6:33
or we can actually return
6:34
in a HTTP response.
6:36
So I'm going to import
6:37
at the top of my program here
6:38
HDP response.
6:39
I'm going to go return HTTP
6:42
response like that.
6:43
And instead of here, I'm
6:44
just going to return a string,
6:45
which is Hello World.
6:46
This just allows us to return
6:48
some very simple data which we can
6:49
then display on the website.
6:51
So now that we have this view,
6:52
which is simply a function
6:53
that returns some kind of response,
6:55
we need to actually connect this
6:56
to our application
6:57
through a root or a URL.
6:59
To do that,
6:59
we'll go to this newly created
7:01
URL style
7:01
py file inside of our application.
7:04
Notice we have one here
7:05
and we have one inside of our project.
7:07
Now, inside of here.
7:08
What we need to do is create some URLs.
7:10
So they're going to say from
7:11
Django Dot URLs import path.
7:15
Where are they going to say from dot
7:17
import views?
7:18
We're going to import this view style
7:19
py file that we have here.
7:21
Now we're going to specify variable,
7:23
which is the URL patterns.
7:24
We're going to make this equal to a list.
7:26
And inside of here
7:27
we're going to specify paths
7:28
that will connect
7:29
a URL pattern to a specific path or view.
7:33
So for now, I'm
7:34
going to put an empty path,
7:35
which just means we go to the root
7:36
kind of URL of our website.
7:38
I should have said root
7:39
kind of the base URL of our website.
7:42
We're going to connect this to the views
7:43
dot home
7:44
view or function,
7:46
and we're going to specify
7:46
that this has a name of home.
7:48
Essentially what this means is
7:49
when we go to this kind of empty string
7:51
path here,
7:52
we're going to call the views
7:54
dot home function, which is this view,
7:56
which will then return this HD response,
7:58
which will allow us to view that.
8:00
Okay, So that's great.
8:01
We've now configured the URL
8:02
within our application.
8:04
However, we also need
8:05
to configure the URL to our application.
8:07
I know this seems a bit weird,
8:08
but let's go inside of demo now.
8:10
Go to URL.
8:11
Stop py
8:12
and we're going to create a URL route
8:13
that allows us to connect
8:15
to our application.
8:17
So here instead of demo,
8:18
we have all of the base routes
8:20
or URLs for our entire project.
8:23
We then need to kind of create a URL here
8:26
that will link
8:27
into our specific applications.
8:29
You'll see why
8:29
this is important in one second.
8:31
But for now, let's create that link.
8:33
So we're going to say path.
8:34
We're going to put an empty string here
8:36
and then we're going to use this function
8:38
include which will import from right here
8:41
instead of include.
8:42
We're going to specify
8:43
the name of our application,
8:45
which actually in
8:45
this case is my app dots and then URLs.
8:49
Now, all this is going to say is that
8:51
whenever I go to this empty string,
8:53
I want to forward
8:54
all of the different URLs
8:55
or routes
8:56
into my app's URLs where they will
8:59
then be handled here.
9:00
So to give you a better example,
9:02
let's imagine
9:03
I did something like my app slash.
9:05
If I did that now, what would happen
9:07
is whenever I go to my app
9:09
slash in my URL bar or my address bar,
9:12
it would
9:12
then take the remaining part of this URL
9:15
and forward
9:16
that into this route right here.
9:18
Meaning
9:19
if I wanted to access my homepage,
9:20
I would now
9:21
need to go to my website domain
9:23
and then my app slash like that.
9:26
If I go there, then
9:27
anything after this
9:28
slash is going to be passed into this
9:30
URLs file will then be handled here.
9:33
Meaning
9:33
if I had something like home here,
9:34
then what
9:35
I would need to do to access
9:36
that root is type my app slash home.
9:39
So the home component,
9:40
so the next kind of part of the root
9:42
will be handled here,
9:43
whereas the main part will be handled
9:45
by this main application.
9:47
Now this is cool
9:48
because this allows us
9:49
to have different prefixes
9:50
for our different applications
9:51
and have similar URLs
9:53
within different applications.
9:54
They can still be accessed
9:56
because we have this main prefix.
9:57
Hopefully that makes sense,
9:58
but for now we're just going
9:59
make this an empty string.
10:01
We're going to remove this
10:01
and we'll go back here
10:02
and make this an empty string as well.
10:04
So we're able to view this root.
Running The Server
10:05
Now that we've done this,
10:06
let's run our application
10:07
and make sure all of this works.
10:09
Then move on to some templates
10:10
and databases.
10:11
So to do this we are going to type Python
10:15
managed our PY and then run server.
10:18
Now when we run the server here,
10:19
you can see that we're getting an error.
10:20
Don't worry about that.
10:21
We'll fix that in one second.
10:22
For now, I'm
10:23
going to look at the URL here,
10:24
which is the URL
10:25
that is running our server.
10:26
So local host port 8000.
10:28
I'm going to press on control
10:30
and then press that.
10:31
I also could just type
10:32
that into my address bar
10:33
and you'll see that I get Hello World
10:35
appearing on my screen.
10:36
Okay, all of that is great.
10:38
And to stop the server, I'm
10:39
going to hit control C on my keyboard.
10:41
Now what I want to do is show you how
10:42
we can use something known as a template.
HTML Templates
10:45
So a template is essentially
10:46
a reusable HTML file
10:48
that allows us to display dynamic data.
10:50
Now we can have templates
10:51
inherit from other templates.
10:53
I'm going to quickly
10:53
show you how that works.
10:55
So to do that,
10:55
what we need to do
10:56
is create a templates
10:57
folder inside of our application.
11:00
So I'm going to go to my app,
11:01
I'm going to create
11:02
a folder called Templates.
11:03
Very important that you name a templates.
11:05
If you don't name
11:05
a templates, this won't work
11:07
inside of templates,
11:08
we're gonna create a new file
11:09
called based on HTML.
11:11
Inside of here,
11:11
we can use something known as the Jenga
11:13
templating engine,
11:14
which allows us to display dynamic data.
11:17
Now I'm just going to paste
11:18
in the template here
11:19
because I don't want to write all of it
11:20
out in this video,
11:21
considering we're trying to do it fast.
11:23
Now, what this is
11:23
is a simple HTML document
11:25
that has a bootstrap nav bar,
11:27
and I just want to show you
11:28
how the template works.
11:30
Now, instead of these templates,
11:31
we can create things known as blocks.
11:33
These blocks are override
11:34
of a piece of content.
11:36
So I have a block title.
11:37
I'm ending the block here,
11:38
meaning I can then override this title
11:40
in another template.
11:42
Continuing.
11:42
I go down here and I have block content
11:44
and end block,
11:46
meaning I can inherit from this template.
11:48
Get all of the code
11:49
that's inside of here.
11:50
So I get the nav bar
11:51
and then I can change
11:52
whatever's inside
11:53
of these different blocks.
11:55
To illustrate that,
11:55
let's make another template here
11:57
called Home dot HTML.
11:59
Instead of home, we're going to paste
12:00
in some template code here.
12:02
So let me just grab this
12:04
and finish this off.
12:06
So type and block here.
12:08
We're going to put a paragraph tag
12:10
saying this is the home page
12:14
and then end our paragraph tag.
12:17
Now what this does is extend
12:19
the based on each HTML template,
12:20
meaning all of the code
12:22
that exists instead of be based on HTML.
12:24
We're going to import here
12:25
so we can have a consistent style
12:27
for all of the different pages
12:28
in our website
12:29
without having to rewrite
12:30
all of that code.
12:31
We're then going to override the content
12:33
that exists inside of our blocks.
12:34
So for the block title,
12:36
we're going to put homepage
12:37
for our content block.
12:38
We're simply going to put a paragraph tag
12:40
that says, This is the home page.
12:42
That's great.
12:43
We now have our templates.
12:44
Now that we've done that,
12:45
we simply need to render the template.
12:47
To render the template,
12:48
we're going to go to our views file
12:49
inside of our application
12:51
and we're going to use
12:51
this render function
12:53
for the render function.
12:54
We're going to pass request,
12:55
which is right here
12:56
as the first argument.
12:57
We're going to pass
12:58
the name of our template,
12:59
which is home HTML.
13:01
Again, this only works
13:02
if you have it inside
13:03
of the templates directory.
13:05
Now that we've done that,
13:05
we can rerun our server
13:06
and we can view this template.
13:08
So let's run that again.
13:10
Ignore the error for now
13:11
and you can see that
13:12
when I have a look at my website,
13:14
I get this kind of nav bar appearing
13:16
and then I get
13:16
this is the home page
13:18
instead of my content.
13:19
BLOCK
13:20
Now that we've done
13:20
that, let's have a quick
13:21
look at databases. All right.
Database Models and ORM
13:23
So I've opened up this model style
13:24
py file inside of my my app application.
13:28
What we're going to do now
13:29
is create a database model that we can
13:30
then access and use from Django.
13:32
Now Django is great because it provides
13:34
something known as an owner.
13:35
M which is an object relational mapping.
13:37
This means that we can write Python code
13:40
to create different database models
13:41
and then have whatever models
13:43
we create be automatically
13:44
made for us
13:45
in some kind of structured
13:46
database schema like SQL Light three.
13:49
So you'll actually see that
13:50
as we
13:50
start creating these models,
13:51
what will happen is
13:52
we'll make something known
13:53
as a migration.
13:54
This migration is actually automated code
13:57
that will then
13:57
go and create the corresponding model
13:59
in something like sequel MongoDB
14:01
or whatever it is
14:02
that we're using as our database
14:04
backend engine.
14:05
You don't need to understand this fully,
14:06
but for now
14:07
I'm going to paste
14:07
in a symbol database model.
14:09
You can see that I have a to do item.
14:11
This is a model
14:12
and we have different fields on the model
14:14
which are written as Python attributes.
14:16
We have a character
14:17
field in a Boolean field.
14:18
Obviously we can get
14:19
much more complicated
14:20
and do things like references,
14:21
but I don't have time for that
14:22
in this video.
14:23
So we've created a simple database model.
14:25
What I need to do now
14:26
is register this model
14:27
with my admin panel,
14:28
which we're going to look at in
14:29
one minute,
14:30
and then I need to apply something
14:31
known as a migration
14:32
so that we actually have this model
14:34
existing in our SQL light database.
14:37
So what I'm going to do
14:37
here is go to administer pie
14:39
AM and our pie is the file
14:40
where we can register different models
14:42
so that they will appear
14:43
inside of our admin panel
14:45
allowing us to modify and view them.
14:47
So what I'm going to do
14:47
is type from models import to do item,
14:51
which is the model that we created.
14:53
You can import other models here as well.
14:55
I'm going to type admin, dot site,
14:57
dot register
14:58
and then we're going to put the
14:59
to do item here.
15:01
Now when we run our application,
15:03
we go to the admin panel,
15:04
which we're going to do in
15:04
one second will be able to view
15:06
this model.
15:07
Okay, now that we've done that,
15:08
what we need to do
15:09
is make our migrations.
15:10
So any time you make a change
15:11
to your database models,
15:13
you need to make something
15:14
known as a migration.
15:15
Now this migration again
Django Migrations
15:16
is some automated code
15:17
which Django will apply to the database,
15:20
which allows you
15:21
to change your models and update them
15:24
while kind of maintaining that data
15:26
and ensuring that
15:27
if data already exists in the database,
15:28
you're not going to break that
15:29
or remove that
15:30
when you make a change
15:31
to the database schema.
15:32
The way you do this as you type
15:33
python managed a pie
15:35
and then make migrations,
15:37
you need to run this any single time
15:39
you make a change to
15:40
any of your database.
15:41
Months
15:41
after that, you're going to
15:42
type python managed on pie
15:46
and then migrate, if I
15:48
can spell this correctly.
15:50
Now, when you type migrate,
15:51
this is going to actually apply
15:52
the migration runs
15:53
and update the database for you.
15:55
So now you'll see when we rerun
15:57
our application
15:57
will no longer get that error
15:59
because we've made the correct migrations
16:01
here to our database.
16:02
So this is something that a lot of people
16:04
get confused with pretty much any time
16:05
you make a change here.
16:06
So you add another attribute,
16:07
you add another model,
16:08
etc., run, make migrations,
16:10
apply the migrations.
16:11
And then Django will automatically handle
16:13
all of the operations on your database
16:15
that you don't need
16:16
to deal with them yourself.
16:17
All right.
16:17
So now that we have this database
16:18
model, let's see how we can do
16:20
some operations with it.
16:21
So what I'm going to do now
16:22
is go in and create a new view.
Rendering Database Entries
16:24
Now, what this view is going to do
16:25
is render a template
16:26
that will view all of the different
16:27
to do list items that we have.
16:29
So actually, let's first
16:30
go and make a template.
16:31
I'm going to call this to dos, not HTML.
16:34
Instead of here,
16:34
I'm going to pay something.
16:35
Feel free to pause the video
16:36
and have a look at it,
16:37
but I will briefly explain.
16:39
So inside of here you can see that
16:40
we're extending from the base template.
16:42
We're overwriting the block content.
16:44
Then we're actually using a for loop
16:46
within this template,
16:47
which is something that is valid.
16:49
What we do here
16:49
is we render different list items
16:51
for every single entry
16:52
in our to dos, which is a variable
16:54
we can pass into this template.
16:56
Then we can access
16:57
an attribute on this variable,
16:59
which is a python dictionary.
17:00
We do that using this double
17:02
curly braces.
17:03
Anything that you embed inside of double
17:05
curly braces
17:06
here will be treated as a variable
17:08
that you are kind of extracting
17:10
and viewing
17:11
as the actual value
17:12
rather than some HTML content.
17:14
So whenever you're using a variable,
17:15
use two sets of curly braces.
17:17
Then what we're doing
17:18
is running an if statement.
17:20
We're saying if the to do list
17:21
item is completed,
17:22
render completed,
17:23
otherwise render not completed,
17:25
then we are ending the for loop lock
17:27
and we are ending the content block.
17:29
There's a lot of other cool stuff
17:30
you can do here,
17:30
but this is the basics on conditional
17:32
rendering and doing kind of block
17:33
rendering or multiple rendering
17:35
based on some type of variable
17:37
you pass inside of here.
17:38
So now what we need to do is go to views
17:40
and we need to create a view
17:40
that renders that template.
17:42
So we're going to say define to dos,
17:44
we're going to take in our request,
17:46
we're going to return
17:48
a render,
17:50
we're going to render the request.
17:53
If we can type this correctly,
17:54
this is going to be two dos dot HTML.
17:57
And now what we need to do
17:58
is pass a python dictionary
18:00
that contains the variables or the key
18:01
mapping pairs
18:02
that we want to view inside of here.
18:04
So in this case, I want to pass to DOS.
18:06
So what I'm going to do is put
18:08
a dictionary,
18:10
I'm going to say to dos
18:11
and then I want to view
18:12
all of my to do list items.
18:14
Now how do I view of my to do list items?
18:16
Well, I need to query them
18:16
from my database.
18:18
Fortunately, since we have the forum,
18:19
we can do that quite quickly.
18:21
So we can say from models imports
18:24
to do item
18:25
and then we can access
18:26
all of the instances of our to do item.
18:28
So to do that, I'll say to
18:29
dos or actually I can't do that.
18:31
A variable I'll just say
18:33
items is equal to
18:35
to do item dot objects, dot.
18:39
All this is going
18:41
to get all of the different objects
18:42
that exist inside of this database field.
18:44
Then I can simply pass them
18:46
here as a list object.
18:47
So I'll say to dos is equal to items.
18:49
Now I'm successfully
18:50
rendering this template.
18:52
Now what I need to do
18:53
is create a URL for this template
18:54
or for this route.
18:55
To do that, I'm going to go to URLs
18:57
and I'm going to create a path
18:58
for the path.
18:59
This time we'll put to DOS slash
19:02
like that.
19:03
Then we're going to say views dot to dos.
19:06
I won't say the name is to dos.
19:09
Okay,
19:10
so now assuming everything is successful,
19:11
we should be able to go to the DOS
19:12
and view all of our different to dos,
19:14
although we don't currently have any.
19:16
So if I go here to slash to dos,
19:20
you can see that
19:20
we get it to do list header,
19:21
but it doesn't contain any items.
19:23
Now we're going to quickly
19:24
look at the Django admin panel
19:26
and then you will see how we can view
19:27
those different items.
19:28
All right.
19:29
So now we're talking about the Django
Django Admin Panel
19:30
admin panel.
19:31
Now this is a special thing
19:32
that's provided by Django,
19:33
which allows us to manage users
19:35
in different database models.
19:36
It's quite useful and requires
19:38
minimal configuration.
19:39
Well, we need to do
19:40
if we want to work with the Django
19:41
admin panel is create a user.
19:43
So we're going to type
19:45
Python
19:46
managed API and then create super user.
19:49
When we do that, it's going to prompt us
19:51
for username and password.
19:52
We don't need to do the email.
19:53
I'll just type in a password here.
19:55
Make sure you remember
19:56
once you create this user,
19:57
then what you can do
19:58
is run your applications
19:59
a Python managed API run server.
20:01
You can go into your main URL here.
20:03
So we have that open
20:04
and then type slash admin
20:06
when you type slash AB
20:07
and it will bring you
20:08
to a pre-built admin
20:09
dashboard where you can then
20:10
sign in with your credentials.
20:12
So I'll type in my password here
20:13
and be brought to this page.
20:15
Now notice
20:15
it shows me the different database
20:17
models from my various apps.
20:18
We also have groups and users,
20:19
which we're not looking at now.
20:21
We have access to to do items
20:22
or go to to do items and I can press add
20:24
now I can actually modify
20:25
my different items
20:27
so I can do something like my item
20:29
and mark that as completed.
20:31
Let's do one more
20:33
another item and mark
20:34
that as not completed.
20:35
Now that we've done that,
20:36
we can go back to slash
20:38
to dos
20:39
and you'll see that
20:39
we have the two different
20:40
to do list items appearing
20:41
and those will be saved
20:42
persistently inside
20:43
of our SQLite database,
20:45
which is running a local locally.
20:46
Sorry, but we could actually host
20:48
and kind of have, you know,
20:49
a more persistent database
20:50
that's not just a file on our computer.
20:52
All right.
Next Steps
20:53
So with that said, I'm
20:53
going to wrap up the video here.
20:55
This was the fastest
20:56
I could possibly show you, Django,
20:57
without skipping over a ton of details.
20:59
Now, obviously,
20:59
there is a bunch more stuff to learn.
21:01
If you'd like to learn that.
21:02
I have entire comprehensive tutorials
21:04
on this channel
21:05
and actually an entire Django course
21:07
that is completely free.
21:08
So feel free to check that out.
21:10
But that said, if you enjoyed the video,
21:12
make sure
21:12
they like subscribe to the channel
21:14
and I look forward to seeing
21:14
you in another one.